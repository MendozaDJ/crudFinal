

-- ===============================================
-- USUARIO
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_InsertarUsuario (
    p_nombre_usuario       IN VARCHAR2,
    p_contrasena           IN VARCHAR2,
    p_correo               IN VARCHAR2,
    p_id_rol               IN NUMBER,
    p_usuario_creacion     IN VARCHAR2
)
IS
BEGIN
    INSERT INTO USUARIO (
        id_usuario, nombre_usuario, contrasena, correo, id_rol, estado,
        fecha_creacion, usuario_creacion
    ) VALUES (
        SEQ_USUARIO.NEXTVAL, p_nombre_usuario, p_contrasena, p_correo, p_id_rol, 'ACTIVO',
        SYSDATE, p_usuario_creacion
    );
END;
/

CREATE OR REPLACE PROCEDURE sp_ActualizarUsuario (
    p_id_usuario           IN NUMBER,
    p_correo               IN VARCHAR2,
    p_estado               IN VARCHAR2,
    p_usuario_modificacion IN VARCHAR2
)
IS
BEGIN
    UPDATE USUARIO
    SET correo = p_correo,
        estado = p_estado,
        fecha_modificacion = SYSDATE,
        usuario_modificacion = p_usuario_modificacion
    WHERE id_usuario = p_id_usuario;
END;
/

CREATE OR REPLACE PROCEDURE sp_EliminarUsuario (
    p_id_usuario IN NUMBER
)
IS
BEGIN
    DELETE FROM USUARIO WHERE id_usuario = p_id_usuario;
END;
/

-- ===============================================
-- ESTUDIANTE
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_InsertarEstudiante (
    p_id_usuario       IN NUMBER,
    p_codigo_estudiante IN VARCHAR2,
    p_nombre           IN VARCHAR2,
    p_apellido         IN VARCHAR2,
    p_telefono         IN VARCHAR2,
    p_carrera          IN VARCHAR2,
    p_usuario_creacion IN VARCHAR2
)
IS
BEGIN
    INSERT INTO ESTUDIANTE (
        id_estudiante, id_usuario, codigo_estudiante, nombre, apellido,
        telefono, carrera, estado, fecha_registro, fecha_creacion, usuario_creacion
    ) VALUES (
        SEQ_ESTUDIANTE.NEXTVAL, p_id_usuario, p_codigo_estudiante, p_nombre, p_apellido,
        p_telefono, p_carrera, 'ACTIVO', SYSDATE, SYSDATE, p_usuario_creacion
    );
END;
/

CREATE OR REPLACE PROCEDURE sp_ActualizarEstudiante (
    p_id_estudiante         IN NUMBER,
    p_telefono              IN VARCHAR2,
    p_estado                IN VARCHAR2,
    p_usuario_modificacion IN VARCHAR2
)
IS
BEGIN
    UPDATE ESTUDIANTE
    SET telefono = p_telefono,
        estado = p_estado,
        fecha_modificacion = SYSDATE,
        usuario_modificacion = p_usuario_modificacion
    WHERE id_estudiante = p_id_estudiante;
END;
/

CREATE OR REPLACE PROCEDURE sp_EliminarEstudiante (
    p_id_estudiante IN NUMBER
)
IS
BEGIN
    DELETE FROM ESTUDIANTE WHERE id_estudiante = p_id_estudiante;
END;
/

-- ===============================================
-- BIBLIOTECARIO
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_InsertarBibliotecario (
    p_id_usuario       IN NUMBER,
    p_codigo_empleado  IN VARCHAR2,
    p_nombre           IN VARCHAR2,
    p_apellido         IN VARCHAR2,
    p_telefono         IN VARCHAR2,
    p_puesto           IN VARCHAR2,
    p_usuario_creacion IN VARCHAR2
)
IS
BEGIN
    INSERT INTO BIBLIOTECARIO (
        id_bibliotecario, id_usuario, codigo_empleado, nombre, apellido,
        telefono, puesto, estado, fecha_creacion, usuario_creacion
    ) VALUES (
        SEQ_BIBLIOTECARIO.NEXTVAL, p_id_usuario, p_codigo_empleado, p_nombre, p_apellido,
        p_telefono, p_puesto, 'ACTIVO', SYSDATE, p_usuario_creacion
    );
END;
/

CREATE OR REPLACE PROCEDURE sp_ActualizarBibliotecario (
    p_id_bibliotecario      IN NUMBER,
    p_telefono              IN VARCHAR2,
    p_estado                IN VARCHAR2,
    p_usuario_modificacion IN VARCHAR2
)
IS
BEGIN
    UPDATE BIBLIOTECARIO
    SET telefono = p_telefono,
        estado = p_estado,
        fecha_modificacion = SYSDATE,
        usuario_modificacion = p_usuario_modificacion
    WHERE id_bibliotecario = p_id_bibliotecario;
END;
/

CREATE OR REPLACE PROCEDURE sp_EliminarBibliotecario (
    p_id_bibliotecario IN NUMBER
)
IS
BEGIN
    DELETE FROM BIBLIOTECARIO WHERE id_bibliotecario = p_id_bibliotecario;
END;
/

-- ===============================================
-- LIBRO
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_InsertarLibro (
    p_isbn              IN VARCHAR2,
    p_titulo            IN VARCHAR2,
    p_editorial         IN VARCHAR2,
    p_anio_publicacion  IN NUMBER,
    p_edicion           IN VARCHAR2,
    p_id_categoria      IN NUMBER,
    p_ubicacion         IN VARCHAR2,
    p_resumen           IN CLOB,
    p_usuario_creacion  IN VARCHAR2
)
IS
    v_usuario_creacion VARCHAR2(50);
BEGIN
    v_usuario_creacion := NVL(p_usuario_creacion, 'sistema');

    INSERT INTO LIBRO (
        id_libro, isbn, titulo, editorial, anio_publicacion,
        edicion, id_categoria, ubicacion, resumen,
        fecha_creacion, usuario_creacion
    ) VALUES (
        SEQ_LIBRO.NEXTVAL, p_isbn, p_titulo, p_editorial, p_anio_publicacion,
        p_edicion, p_id_categoria, p_ubicacion, p_resumen,
        SYSDATE, v_usuario_creacion
    );
END;
/

CREATE OR REPLACE PROCEDURE sp_ActualizarLibro (
    p_id_libro              IN NUMBER,
    p_ubicacion             IN VARCHAR2,
    p_usuario_modificacion IN VARCHAR2
)
IS
BEGIN
    UPDATE LIBRO
    SET ubicacion = p_ubicacion,
        fecha_modificacion = SYSDATE,
        usuario_modificacion = p_usuario_modificacion
    WHERE id_libro = p_id_libro;
END;
/

CREATE OR REPLACE PROCEDURE sp_EliminarLibro (
    p_id_libro IN NUMBER
)
IS
BEGIN
    DELETE FROM LIBRO WHERE id_libro = p_id_libro;
END;
/

CREATE OR REPLACE PROCEDURE sp_ObtenerLibrosDisponibles
IS
BEGIN
    FOR r IN (
        SELECT DISTINCT
            L.id_libro,
            L.isbn,
            L.titulo,
            L.editorial,
            L.anio_publicacion,
            L.edicion,
            L.id_categoria,
            L.ubicacion,
            L.resumen
        FROM LIBRO L
        JOIN EJEMPLAR E ON L.id_libro = E.id_libro
        WHERE E.estado = 'DISPONIBLE'
    ) LOOP
        NULL; 
    END LOOP;
END;
/

-- ===============================================
-- PRESTAMO
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_InsertarPrestamo (
    p_id_estudiante             IN NUMBER,
    p_id_ejemplar               IN NUMBER,
    p_id_bibliotecario          IN NUMBER,
    p_fecha_devolucion_esperada IN DATE,
    p_usuario_creacion          IN VARCHAR2
)
IS
    v_estado_ejemplar VARCHAR2(20);
BEGIN
    SELECT estado INTO v_estado_ejemplar
    FROM EJEMPLAR WHERE id_ejemplar = p_id_ejemplar;

    IF v_estado_ejemplar = 'DISPONIBLE' THEN
        INSERT INTO PRESTAMO (
            id_prestamo, id_estudiante, id_ejemplar, id_bibliotecario,
            fecha_devolucion_esperada, estado, renovaciones,
            fecha_creacion, usuario_creacion
        ) VALUES (
            SEQ_PRESTAMO.NEXTVAL, p_id_estudiante, p_id_ejemplar, p_id_bibliotecario,
            p_fecha_devolucion_esperada, 'ACTIVO', 0,
            SYSDATE, p_usuario_creacion
        );

        UPDATE EJEMPLAR
        SET estado = 'PRESTADO'
        WHERE id_ejemplar = p_id_ejemplar;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE sp_EliminarPrestamo (
    p_id_prestamo IN NUMBER
)
IS
BEGIN
    DELETE FROM PRESTAMO WHERE id_prestamo = p_id_prestamo;
END;
/

-- ===============================================
-- sp_SolicitarPrestamo
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_SolicitarPrestamo (
    p_id_libro        IN NUMBER,
    p_nombre_usuario  IN VARCHAR2,
    p_estado          OUT VARCHAR2,
    p_id_ejemplar     OUT NUMBER
)
IS
    v_id_estudiante     NUMBER;
    v_id_ejemplar       NUMBER;
    v_fecha_devolucion  DATE := SYSDATE + 7;
BEGIN
    -- Obtener ID del estudiante
    SELECT E.id_estudiante
    INTO v_id_estudiante
    FROM ESTUDIANTE E
    JOIN USUARIO U ON U.id_usuario = E.id_usuario
    WHERE U.nombre_usuario = p_nombre_usuario;

    -- Validar préstamo duplicado
    FOR x IN (
        SELECT 1
        FROM PRESTAMO P
        JOIN EJEMPLAR EJ ON P.id_ejemplar = EJ.id_ejemplar
        WHERE P.id_estudiante = v_id_estudiante
          AND EJ.id_libro = p_id_libro
          AND P.estado = 'ACTIVO'
    ) LOOP
        p_estado := 'YA POSEE EL LIBRO';
        p_id_ejemplar := NULL;
        RETURN;
    END LOOP;

    -- Obtener ejemplar disponible
    SELECT id_ejemplar INTO v_id_ejemplar
    FROM (
        SELECT id_ejemplar
        FROM EJEMPLAR
        WHERE id_libro = p_id_libro AND estado = 'DISPONIBLE'
        FETCH FIRST 1 ROWS ONLY
    );

    -- Insertar préstamo
    INSERT INTO PRESTAMO (
        id_prestamo, id_estudiante, id_ejemplar, id_bibliotecario,
        fecha_prestamo, fecha_devolucion_esperada,
        estado, renovaciones, fecha_creacion, usuario_creacion
    ) VALUES (
        SEQ_PRESTAMO.NEXTVAL, v_id_estudiante, v_id_ejemplar, 1,
        SYSDATE, v_fecha_devolucion,
        'ACTIVO', 0, SYSDATE, p_nombre_usuario
    );

    UPDATE EJEMPLAR SET estado = 'PRESTADO' WHERE id_ejemplar = v_id_ejemplar;

    p_estado := 'PRESTADO';
    p_id_ejemplar := v_id_ejemplar;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_estado := 'NO DISPONIBLE';
        p_id_ejemplar := NULL;
    WHEN OTHERS THEN
        p_estado := 'ERROR';
        p_id_ejemplar := NULL;
END;
/

-- ===============================================
-- sp_DevolverPrestamo
-- ===============================================
CREATE OR REPLACE PROCEDURE sp_DevolverPrestamo (
    p_id_prestamo           IN NUMBER,
    p_fecha_devolucion      IN DATE,
    p_usuario_modificacion  IN VARCHAR2,
    p_observaciones         IN VARCHAR2
)
IS
    v_id_ejemplar      NUMBER;
    v_id_estudiante    NUMBER;
    v_fecha_esperada   DATE;
    v_dias_atraso      NUMBER;
    v_monto            NUMBER;
BEGIN
    -- Obtener datos del préstamo
    SELECT id_ejemplar, id_estudiante, fecha_devolucion_esperada
    INTO v_id_ejemplar, v_id_estudiante, v_fecha_esperada
    FROM PRESTAMO
    WHERE id_prestamo = p_id_prestamo;

    -- Insertar en devolución
    INSERT INTO DEVOLUCION (
        id_devolucion, id_prestamo, id_bibliotecario, fecha_devolucion, observaciones
    ) VALUES (
        SEQ_DEVOLUCION.NEXTVAL, p_id_prestamo, 1, p_fecha_devolucion, p_observaciones
    );

    -- Actualizar préstamo
    UPDATE PRESTAMO
    SET estado = 'COMPLETADO',
        fecha_devolucion_real = p_fecha_devolucion,
        fecha_modificacion = SYSDATE,
        usuario_modificacion = p_usuario_modificacion
    WHERE id_prestamo = p_id_prestamo;

    -- Actualizar ejemplar
    UPDATE EJEMPLAR
    SET estado = 'DISPONIBLE'
    WHERE id_ejemplar = v_id_ejemplar;

    -- Insertar multa si hay atraso
    IF p_fecha_devolucion > v_fecha_esperada THEN
        v_dias_atraso := p_fecha_devolucion - v_fecha_esperada;
        v_monto := v_dias_atraso * 1;

        INSERT INTO MULTA (
            id_multa, id_prestamo, id_estudiante, monto, estado, motivo, id_parametro_multa, fecha_generacion
        ) VALUES (
            SEQ_MULTA.NEXTVAL, p_id_prestamo, v_id_estudiante, v_monto,
            'PENDIENTE', 'Devolución tardía', 1, SYSDATE
        );
    END IF;
END;
/
